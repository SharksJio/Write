TARGET = libSDL2.a

SOURCES = \
  src/*.c \
  src/atomic/*.c \
  src/audio/*.c \
  src/audio/dummy/*.c \
  src/audio/coreaudio/*.m \
  src/cpuinfo/*.c \
  src/events/*.c \
  src/file/*.c \
  src/file/cocoa/*.m \
  src/filesystem/cocoa/*.m \
  src/hidapi/ios/*.m \
  src/haptic/*.c \
  src/haptic/dummy/*.c \
  src/joystick/*.c \
  src/joystick/iphoneos/*.m \
  src/loadso/dlopen/*.c \
  src/power/*.c \
  src/power/uikit/*.m \
  src/render/*.c \
  src/render/metal/*.m \
  src/render/opengles2/*.c \
  src/render/opengles/*.c \
  src/render/software/*.c \
  src/sensor/*.c \
  src/sensor/dummy/*.c \
  src/sensor/coremotion/*.m \
  src/stdlib/*.c \
  src/thread/*.c \
  src/thread/pthread/*.c \
  src/timer/*.c \
  src/timer/unix/*.c \
  src/video/*.c \
  src/video/dummy/*.c \
  src/video/uikit/*.m \
  src/video/yuv2rgb/*.c \
  src/main/uikit/SDL_uikit_main.c

INC = ./include
INCSYS =
DEFS = GLES_SILENCE_DEPRECATION


# run `xcrun --sdk iphoneos --find clang` to get path to clang
# run `xcrun --sdk iphoneos --show-sdk-path` to get arg for -isysroot
XCODE = /Applications/Xcode.app/Contents/Developer
SIM ?= 0
ifneq ($(SIM), 0)
  SDKROOT = $(XCODE)/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk
  TARGET_ARCH = x86_64-apple-ios11.0-simulator
  ARCH_ONLY = x86_64
else
  SDKROOT = $(XCODE)/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk
  TARGET_ARCH = arm64-apple-ios11.0
  ARCH_ONLY = arm64
endif
CLANG = $(XCODE)/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -target $(TARGET_ARCH) -isysroot $(SDKROOT)

CFLAGS = -MMD -Wall -Wshadow
CXX = $(CLANG) -x c++
CXXFLAGS = --std=c++14 -fno-rtti -fno-exceptions -Werror=return-type
CC = $(CLANG) -x c
CCFLAGS = --std=c99
MC = $(CLANG) -x objective-c
MFLAGS = -fobjc-arc
# ar
AR = /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/libtool -static -arch_only $(ARCH_ONLY) -syslibroot $(SDKROOT)
ARFLAGS =

DEBUG ?= 1
ifneq ($(SIM), 0)
	CFLAGS += -Os -DNDEBUG
	BUILDDIR = SimDebug
else ifneq ($(DEBUG), 0)
	CFLAGS += -O0 -g
	LDFLAGS += -rdynamic
	BUILDDIR = Debug
else
	CFLAGS += -Os -g -DNDEBUG
	BUILDDIR = Release
endif

# project independent stuff
ifneq ($(TOPDIR),)
	OBJDIR=$(BUILDDIR)/$(TOPDIR)
else
	OBJDIR=$(BUILDDIR)
endif

# include files
INCFLAGS = $(INC:%=-I%) $(INCSYS:%=-isystem%)

# defines
CFLAGS += $(DEFS:%=-D%)

ALLSOURCES=$(wildcard $(SOURCES))
SRCBASE=$(basename $(ALLSOURCES))
OBJ=$(SRCBASE:%=$(OBJDIR)/%.o)
DEPS=$(SRCBASE:%=$(OBJDIR)/%.d)
TGT=$(BUILDDIR)/$(TARGET)
# gcc will not create directories, so depend on existence of all directories in output folder
# sort removes duplicates (which cause make error)
BUILDDIRS=$(sort $(dir $(OBJ)))

.PHONY: all clean distclean

all: $(TGT)

$(OBJDIR)/%.o: %.cpp
	$(CXX) -c $(CFLAGS) $(CXXFLAGS) $(INCFLAGS) -o $@ $<

$(OBJDIR)/%.o: %.c
	$(CC) -c $(CFLAGS) $(CCFLAGS) $(INCFLAGS) -o $@ $<

$(OBJDIR)/%.o: %.m
	$(MC) -c $(CFLAGS) $(MFLAGS) $(INCFLAGS) -o $@ $<

$(TGT): $(OBJ)
	$(AR) -o $@ $^ $(ARFLAGS)

# | (pipe) operator causes make to just check for existence instead of timestamp
$(OBJ): | $(BUILDDIRS)

$(BUILDDIRS):
	mkdir -p $(BUILDDIRS)

clean:
	rm -f $(TGT) $(OBJ) $(DEPS)

distclean:
	rm -rf ./Debug ./Release

# dependency files generated by gcc (-MMD switch) ("-include" ignores file if missing)
-include $(DEPS)

