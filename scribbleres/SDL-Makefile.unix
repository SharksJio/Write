TARGET = libSDL2

# SDL_config_linux.h was taken from cmake build
# To build with cmake: (NOTE we should also disable SSE3, etc.!)
# - in Debug: cmake .. -DSDL_AUDIO=OFF -DSDL_JOYSTICK=OFF -DSDL_HAPTIC=OFF -DSDL_POWER=OFF -DSDL_SENSOR=OFF -DSDL_RENDER=OFF -DSDL_SHARED=OFF -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_FLAGS="-g"
# - in Release: cmake .. -DSDL_AUDIO=OFF -DSDL_JOYSTICK=OFF -DSDL_HAPTIC=OFF -DSDL_POWER=OFF -DSDL_SENSOR=OFF -DSDL_RENDER=OFF -DSDL_SHARED=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS="-Os"

SOURCES = \
  src/*.c \
  src/atomic/*.c \
  src/core/linux/*.c \
  src/core/unix/*.c \
  src/cpuinfo/*.c \
  src/events/*.c \
  src/file/*.c \
  src/filesystem/unix/*.c \
  src/loadso/dlopen/*.c \
  src/render/*.c \
  src/render/opengles2/*.c \
  src/render/software/*.c \
  src/stdlib/*.c \
  src/thread/*.c \
  src/thread/pthread/*.c \
  src/timer/*.c \
  src/timer/unix/*.c \
  src/video/*.c \
  src/video/dummy/*.c \
  src/video/x11/*.c \
  src/video/yuv2rgb/*.c


INC = ./include
INCSYS = /usr/include/dbus-1.0 /usr/lib/x86_64-linux-gnu/dbus-1.0/include /usr/include/ibus-1.0 /usr/include/glib-2.0 /usr/lib/x86_64-linux-gnu/glib-2.0/include
#INCFILES = ../scribbleres/force_link_glibc_2.14.h  -- have to build in older chroot environment instead
# SDL_*_DISABLED are defined in SDL_config_linux.h

ifneq ($(shell git rev-parse --abbrev-ref HEAD),write-linux)
  $(error Not on write-linux branch!)
endif

# common C and C++ flags
CFLAGS = -MMD -Wall -Wshadow -pthread
# C
CC = gcc
CCFLAGS = -Werror=implicit-function-declaration -Werror=int-conversion
# linker
LD = gcc
LDFLAGS =
AR = ar
ARFLAGS =

DEBUG ?= 0
ifneq ($(DEBUG), 0)
  CFLAGS += -O0 -g
  # rdynamic needed to get backtrace symbols from, e.g., catchsegv
  LDFLAGS += -rdynamic
  BUILDDIR ?= Debug
  TARGET := $(TARGET)d
else
  CFLAGS += -Os -DNDEBUG
  BUILDDIR ?= Release
endif

ifneq ($(TOPDIR),)
  OBJDIR=$(BUILDDIR)/$(TOPDIR)
else
  OBJDIR=$(BUILDDIR)
endif

# include files
INCFLAGS = $(INC:%=-I%) $(INCSYS:%=-isystem %) $(INCFILES:%=-include %)

# defines
CFLAGS += $(DEFS:%=-D%)

ALLSOURCES=$(wildcard $(SOURCES))
SRCBASE=$(basename $(ALLSOURCES))
OBJ=$(SRCBASE:%=$(OBJDIR)/%.o)
DEPS=$(SRCBASE:%=$(OBJDIR)/%.d)
TGT=$(BUILDDIR)/$(TARGET).a
# gcc will not create directories, so depend on existence of all directories in output folder
# sort removes duplicates (which cause make error)
BUILDDIRS=$(sort $(dir $(OBJ)))

.PHONY: all clean distclean sourcelist

all: $(TGT)

$(OBJDIR)/%.o: %.c
	$(CC) -c $(CFLAGS) $(CCFLAGS) $(INCFLAGS) -o $@ $<

$(TGT): $(OBJ)
	$(AR) cr$(ARFLAGS) $@ $^

# | (pipe) operator causes make to just check for existence instead of timestamp
$(OBJ): | $(BUILDDIRS)

$(BUILDDIRS):
	mkdir -p $(BUILDDIRS)

clean:
	rm -f $(TGT) $(OBJ) $(DEPS)

distclean:
	rm -rf ./Debug ./Release

sourcelist:
	@printf '%s\n' $(SOURCES)

# dependency files generated by gcc (-MMD switch) ("-include" ignores file if missing)
-include $(DEPS)
